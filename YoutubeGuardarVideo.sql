create or replace PROCEDURE P_GUARDAR_VIDEO (
    P_CODIGO_VIDEO OUT TBL_VIDEOS.CODIGO_VIDEO%TYPE,
    P_CODIGO_USUARIO TBL_VIDEOS.CODIGO_USUARIO%TYPE,
    P_CODIGO_ESTADO_VIDEO TBL_VIDEOS.CODIGO_ESTADO_VIDEO%TYPE,
    P_CODIGO_IDIOMA TBL_VIDEOS.CODIGO_IDIOMA%TYPE,
    P_CODIGO_CANAL TBL_VIDEOS.CODIGO_CANAL%TYPE,
    P_NOMBRE_VIDEO TBL_VIDEOS.NOMBRE_VIDEO%TYPE,
    P_RESOLUCION TBL_VIDEOS.RESOLUCION%TYPE,
    P_DURACION_SEGUNDOS TBL_VIDEOS.DURACION_SEGUNDOS%TYPE,
    P_CANTIDAD_LIKES TBL_VIDEOS.CANTIDAD_LIKES%TYPE,
    P_CANTIDAD_DISLIKES TBL_VIDEOS.CANTIDAD_DISLIKES%TYPE,
    P_CANTIDAD_VISUALIZACIONES TBL_VIDEOS.CANTIDAD_VISUALIZACIONES%TYPE,
    P_FECHA_SUBIDA TBL_VIDEOS.FECHA_SUBIDA%TYPE,
    P_DESCRIPCION TBL_VIDEOS.DESCRIPCION%TYPE,
    P_CANTIDAD_SHARES TBL_VIDEOS.CANTIDAD_SHARES%TYPE,
    P_URL TBL_VIDEOS.URL%TYPE,
    P_MENSAJE_RESULTADO OUT VARCHAR
) IS
    V_CODIGO_CANAL TBL_CANALES.CODIGO_CANAL%TYPE;
    V_CODIGO_USUARIO TBL_USUARIOS.CODIGO_USUARIO%TYPE;
    V_EXCEPCION_CANAL EXCEPTION;
    V_EXCEPCION_USUARIO EXCEPTION;
BEGIN
    BEGIN
        SELECT CODIGO_CANAL
        INTO V_CODIGO_CANAL
        FROM TBL_CANALES
        WHERE CODIGO_CANAL = P_CODIGO_CANAL;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE V_EXCEPCION_CANAL;
    END;

    BEGIN
        SELECT CODIGO_USUARIO
        INTO V_CODIGO_USUARIO
        FROM TBL_USUARIOS
        WHERE CODIGO_USUARIO = P_CODIGO_USUARIO;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE V_EXCEPCION_USUARIO;
    END;
    P_CODIGO_VIDEO := SEQ_CODIGO_VIDEO.NEXTVAL;
    INSERT INTO tbl_videos (
        codigo_video,
        codigo_usuario,
        codigo_estado_video,
        codigo_idioma,
        codigo_canal,
        nombre_video,
        resolucion,
        duracion_segundos,
        cantidad_likes,
        cantidad_dislikes,
        cantidad_visualizaciones,
        fecha_subida,
        descripcion,
        cantidad_shares,
        url
    ) VALUES (
        P_CODIGO_VIDEO,
        P_CODIGO_USUARIO,
        P_CODIGO_ESTADO_VIDEO,
        P_CODIGO_IDIOMA,
        P_CODIGO_CANAL,
        P_NOMBRE_VIDEO,
        P_RESOLUCION,
        P_DURACION_SEGUNDOS,
        P_CANTIDAD_LIKES,
        P_CANTIDAD_DISLIKES,
        P_CANTIDAD_VISUALIZACIONES,
        P_FECHA_SUBIDA,
        P_DESCRIPCION,
        P_CANTIDAD_SHARES,
        P_URL
    );

    --EXPLICITO ==> DECLARA CON NOMBRE
    --IMPLICITO ===> SIN NOMBRE Y SE USA EL CICLO FOR

    FOR V_USUARIO IN (
        SELECT CODIGO_USUARIO, CODIGO_CANAL, FECHA_SUSCRIPCION
        FROM TBL_USUARIOS_X_CANAL
        WHERE CODIGO_CANAL = P_CODIGO_CANAL
    ) LOOP
        P_GUARDAR_NOTIFICACION(
            P_codigo_usuario_origen => P_CODIGO_USUARIO,
            P_codigo_usuario_destino => V_USUARIO.CODIGO_USUARIO,
            P_texto_notificacion => 'Se ha subido un nuevo video titulado ' || P_NOMBRE_VIDEO,
            P_codigo_videO => P_CODIGO_VIDEO
        );
    END LOOP;
    COMMIT;
    P_MENSAJE_RESULTADO := 'VIDEO GUARDADO CON EXITO';
    
EXCEPTION
WHEN V_EXCEPCION_CANAL THEN
    P_MENSAJE_RESULTADO := 'EL CANAL NO EXISTE'; 
    ROLLBACK;
WHEN V_EXCEPCION_USUARIO THEN
    P_MENSAJE_RESULTADO := 'EL USUARIO NO EXISTE';
    ROLLBACK;
WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM ||', ' || SQLCODE );
END;